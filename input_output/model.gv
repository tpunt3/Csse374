digraph model{
rankdir = BT;
AppLauncherApplication [
shape="record",
label = "{AppLauncherApplication| + IN_OUT_DIR: String\l+ LOG_FILE: String\l|+ init() : void\l+ main(String[]) : void\l}"
];

ApplicationLauncher [
shape="record",
label = "{ApplicationLauncher| - extensionToRunnerMap: Map\l|+ init() : void\l+ getRunners() : java.util.Collection\l+ addRunner(String; ProcessRunner) : void\l+ shutDown() : void\l+ directoryChanged(DirectoryEvent) : void\l}"
];

DataFileRunner [
shape="record",
label = "{DataFileRunner| + init(String) : void\l+ execute(Path) : void\l}"
];

DirectoryChangeLogger [
shape="record",
label = "{DirectoryChangeLogger| - path: Path\l|+ init(Path) : void\l+ directoryChanged(DirectoryEvent) : void\l}"
];

DirectoryEvent [
shape="record",
label = "{DirectoryEvent| + ENTRY_CREATE: String\l+ ENTRY_DELETE: String\l+ ENTRY_MODIFY: String\l- eventType: String\l- file: Path\l- service: IDirectoryMonitorService\l|+ init(String; Path; IDirectoryMonitorService) : void\l+ getEventType() : java.lang.String\l+ getFile() : java.nio.file.Path\l+ getSource() : problem.IDirectoryMonitorService\l}"
];

DirectoryMonitorService [
shape="record",
label = "{DirectoryMonitorService| - TEMP_FILE: String\l- dir: Path\l- stop: boolean\l- watcher: WatchService\l- listeners: List\l|+ init(Path) : void\l+ getDirectory() : java.nio.file.Path\l+ run() : void\l+ isRunning() : boolean\l+ stopGracefully() : void\l~ clearEverything() : void\l+ addListener(IDirectoryListener) : void\l+ removeListener(IDirectoryListener) : void\l~ notifyListeners(DirectoryEvent) : void\l}"
];

ExecutableFileRunner [
shape="record",
label = "{ExecutableFileRunner| + init(String) : void\l+ execute(Path) : void\l}"
];

IApplicationLauncher [
shape="record",
label = "{\<\<interface\>\>\nIApplicationLauncher| + getRunners() : java.util.Collection\l+ addRunner(String; ProcessRunner) : void\l+ shutDown() : void\l}"
];

IDirectoryListener [
shape="record",
label = "{\<\<interface\>\>\nIDirectoryListener| + directoryChanged(DirectoryEvent) : void\l}"
];

IDirectoryMonitorService [
shape="record",
label = "{\<\<interface\>\>\nIDirectoryMonitorService| + getDirectory() : java.nio.file.Path\l+ isRunning() : boolean\l+ stopGracefully() : void\l+ addListener(IDirectoryListener) : void\l+ removeListener(IDirectoryListener) : void\l}"
];

ProcessRunner [
shape="record",
label = "{ProcessRunner| # processes: List\l# command: String\l|+ init(String) : void\l+ getProcesses() : java.util.List\l+ getCommand() : java.lang.String\l+ execute(Path) : void\l}"
];

//writing relations between classes now
AppLauncherApplication -> Object [arrowhead = "empty"];
ApplicationLauncher -> Object [arrowhead = "empty"];
DataFileRunner -> ProcessRunner [arrowhead = "empty"];
DirectoryChangeLogger -> Object [arrowhead = "empty"];
DirectoryEvent -> Object [arrowhead = "empty"];
DirectoryMonitorService -> Object [arrowhead = "empty"];
ExecutableFileRunner -> ProcessRunner [arrowhead = "empty"];
IApplicationLauncher -> IDirectoryListener [arrowhead = "empty"];
IDirectoryListener -> Object [arrowhead = "empty"];
IDirectoryMonitorService -> Runnable [arrowhead = "empty"];
ProcessRunner -> Object [arrowhead = "empty"];
ApplicationLauncher -> IApplicationLauncher [arrowhead = "empty", style = "dashed"];
DirectoryChangeLogger -> IDirectoryListener [arrowhead = "empty", style = "dashed"];
DirectoryMonitorService -> IDirectoryMonitorService [arrowhead = "empty", style = "dashed"];
}