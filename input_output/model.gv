digraph model{
rankdir = BT;
DecoratorDetector [
shape="record",
label = "{DecoratorDetector| - model: IModel\l- decorators: IClass\l- components: IClass\l|- findComponent(IClass; IClass) : boolean\l+ init(IModel) : void\l+ detectPatterns() : void\l}"
];

MainGui [
shape="record",
label = "{MainGui| ~ frame: JFrame\l~ panel: JPanel\l~ jpb: JProgressBar\l~ inputClasses: String\l~ classes: String[]\l~ dotPath: String\l~ sdPath: String\l~ outputDir: String\l~ phases: String\l~ adapterDelegation: int\l~ decoratorDelegation: int\l~ singletonGetInstance: boolean\l- parserPhases: String\l~ dp: DesignParser\l~ moveOn: JButton\l|+ actionPerformed(ActionEvent) : void\l% access$0(MainGui) : void\l+ init() : void\l+ addMenu() : JMenuBar\l- splitPhases() : void\l+ disableFrame() : void\l+ createLandingScreen() : void\l- readProperties() : void\l- showHelp() : void\l+ analyzeClicked() : void\l- showAbout() : void\l+ propertyChange(PropertyChangeEvent) : void\l- startResults() : void\l}"
];

ClassMethodVisitor [
shape="record",
label = "{ClassMethodVisitor| - model: Model\l- decorated: ClassVisitor\l- clazz: IClass\l- signature: String\l- name: String\l- argList: String\l|+ init(int; ClassVisitor; Model) : void\l- addArgToList(String; boolean) : void\l~ addReturnType(String) : String\l+ init(int) : void\l+ visitMethod(int; String; String; String; String[]) : MethodVisitor\l~ addArguments(String) : void\l+ getClazz() : IClass\l~ addAccessLevel(int) : String\l}"
];

TargetDecorator [
shape="record",style="filled",fillcolor=green
label = "{TargetDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getSignature() : String\l+ accept(IPatternVisitor) : void\l+ init(IClass) : void\l+ getName() : String\l+ addField(IField) : void\l+ getIsClass() : boolean\l+ getMethods() : IMethod\l+ getFields() : IField\l+ getInterfaceList() : String\l+ addMethod(IMethod) : void\l+ getSuperClass() : String\l+ accept(IVisitor) : void\l}"
];

IClass [
shape="record",style="filled",fillcolor=green
label = "{\<\<interface\>\>\nIClass\n\<\<component\>\>| + getSignature() : String\l+ getInterfaceList() : String\l+ addField(IField) : void\l+ getName() : String\l+ getIsClass() : boolean\l+ addMethod(IMethod) : void\l+ getMethods() : IMethod\l+ getSuperClass() : String\l+ getFields() : IField\l}"
];

LookupKey [
shape="record",
label = "{LookupKey| ~ visitType: VisitType\l~ clazz: Class\l|+ init(VisitType; Class) : void\l+ equals(Object) : boolean\l+ hashCode() : int\l}"
];

Model [
shape="record",color=blue
label = "{Model\n\<\<singleton\>\>|- uniqueInstance: Model\l- callDepth: int\l- classes: IClass\l- relations: IRelation\l- classStrings: String\l- methodStrings: String\l- classesToAdd: String\l- classNames: String\l- classesToVisit: String\l|+ getMethodStrings() : String\l+ acceptSequence(ISubMethod; int) : void\l+ getRelations() : IRelation\l+ getClassesToVisit() : String\l+ accept(IVisitor) : void\l+ addClassToVisit(String) : void\l+ getClazz(String) : IClass\l+ clearModel() : void\l+ clearSD() : void\l+ toString() : String\l+ getClassStrings() : String\l- init() : void\l+ replaceClass(IClass; IClass) : void\l+ getInstance() : Model\l+ writeFile(IVisitor) : void\l+ setClassesToVisit(String) : String\l+ addClazz(IClass) : void\l+ init(IClass) : void\l+ addRelation(IRelation) : void\l+ setRelations(IRelation) : IRelation\l+ setCallDepth(int) : void\l+ getClassNames() : void\l+ findNewClasses(ISubMethod; int) : String[]\l+ accept(IPatternVisitor) : void\l+ getClasses() : IClass\l+ removeClassToVisit(String) : void\l+ getCallDepth() : int\l}"
];

ModelPatternVisitor [
shape="record",
label = "{ModelPatternVisitor| ~ visitor: PatternVisitor\l- toReplace: IClass\l|+ detect(IModel) : void\l- setVisitField() : void\l- checkForSingleton(IClass) : boolean\l% lambda$2(ITraverser) : void\l% lambda$3(ITraverser) : void\l+ init() : void\l- setVisitModel() : void\l- setVisitMethod() : void\l- setPostVisitModel() : void\l- setVisitClass() : void\l- lambda$0(ITraverser) : void\l- lambda$1(ITraverser) : void\l- lambda$4(ITraverser) : void\l}"
];

Method [
shape="record",
label = "{Method| - access: String\l- accessNumber: int\l- name: String\l- args: String\l- returnType: String\l- signature: String\l- clazz: IClass\l- subMethods: ISubMethod\l|+ getAccessNumber() : int\l+ setName(String) : void\l+ getSignature() : String\l+ getArgs() : String\l+ equals(Object) : boolean\l+ getName() : String\l+ accept(IPatternVisitor) : void\l+ getClazz() : IClass\l+ setAccessNumber(int) : void\l+ getSubMethods() : ISubMethod\l+ hashCode() : int\l+ init(String; int; String; String; String; IClass; String; String; String; String; IClass; ISubMethod) : void\l+ accept(IVisitor) : void\l+ setClazz(IClass) : void\l+ getReturnType() : String\l+ setSignature(String) : void\l+ getAccess() : String\l}"
];

DecoratorDecorator [
shape="record",style="filled",fillcolor=green
label = "{DecoratorDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getSignature() : String\l+ getInterfaceList() : String\l+ addField(IField) : void\l+ getIsClass() : boolean\l+ accept(IPatternVisitor) : void\l+ init(IClass) : void\l+ getName() : String\l+ accept(IVisitor) : void\l+ getMethods() : IMethod\l+ getFields() : IField\l+ getSuperClass() : String\l+ addMethod(IMethod) : void\l}"
];

SingletonDetector [
shape="record",
label = "{SingletonDetector| - model: IModel\l- toReplace: IClass\l~ instanceRequired: boolean\l|+ init(IModel) : void\l- checkForSingleton(IClass) : boolean\l+ detectPatterns() : void\l+ init(IModel; boolean) : void\l}"
];

ModelSDOutputStream [
shape="record",
label = "{ModelSDOutputStream| ~ out: OutputStream\l~ s: StringBuilder\l~ visitor: Visitor\l|- setPreVisitModel() : void\l- lambda$1(ITraverser) : void\l- lambda$0(ITraverser) : void\l- setVisitModel() : void\l- write(String) : void\l+ write(IModel) : void\l+ init(OutputStream) : void\l}"
];

AdapteeDecorator [
shape="record",style="filled",fillcolor=green
label = "{AdapteeDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getMethods() : IMethod\l+ accept(IVisitor) : void\l+ accept(IPatternVisitor) : void\l+ getIsClass() : boolean\l+ addMethod(IMethod) : void\l+ getSignature() : String\l+ getSuperClass() : String\l+ init(IClass) : void\l+ getName() : String\l+ getFields() : IField\l+ getInterfaceList() : String\l+ addField(IField) : void\l}"
];

IVisitMethod [
shape="record",
label = "{\<\<interface\>\>\nIVisitMethod| + execute(ITraverser) : void\l}"
];

AdapterDetector [
shape="record",
label = "{AdapterDetector| - model: IModel\l- adapters: IClass\l- adaptees: IClass\l- targets: IClass\l- methodDelegation: int\l|+ detectPatterns() : void\l+ init(IModel) : void\l- checkHierarchy(IClass; IClass; boolean) : IClass\l+ init(IModel; int) : void\l}"
];

Class [
shape="record",
label = "{Class| - name: String\l- methods: IMethod\l- fields: IField\l- isClass: boolean\l- signature: String\l- superClass: String\l- interfaceList: String\l|+ equals(Object) : boolean\l+ getSignature() : String\l+ accept(IPatternVisitor) : void\l+ getIsClass() : boolean\l+ init() : void\l+ addField(IField) : void\l+ getMethods() : IMethod\l+ addMethod(IMethod) : void\l+ getSuperClass() : String\l+ accept(IVisitor) : void\l+ getInterfaceList() : String\l+ getName() : String\l+ init(String; boolean; String; String; String; String; String; String) : void\l+ hashCode() : int\l+ getFields() : IField\l}"
];

ITraverser [
shape="record",
label = "{\<\<interface\>\>\nITraverser| + accept(IVisitor) : void\l+ accept(IPatternVisitor) : void\l}"
];

OurConfig [
shape="record",
label = "{OurConfig| - inputClasses: String\l- outputDir: String\l- dotPath: String\l- sdPath: String\l- phases: String\l- adapterMethodDelegation: String\l- decoratorMethodDelegation: String\l- singletonRequireGetInstance: String\l|+ writeProperties() : void\l+ setDecoratorMethodDelegation(String) : void\l+ setSDPath(String) : void\l+ setSingletonRequireGetInstance(String) : void\l+ setPhases(String) : void\l+ setAdapterMethodDelegation(String) : void\l+ setInputClasses(String) : void\l+ init() : void\l+ setOutputDir(String) : void\l+ setDotPath(String) : void\l}"
];

SubMethod [
shape="record",
label = "{SubMethod| - clazzName: String\l- name: String\l- args: String\l- qualifiedClassName: String\l- returnType: String\l- visited: boolean\l|+ getClazzName() : String\l+ getQualifiedClassName() : String\l+ init(String; String; String; String; String) : void\l+ getMethodName() : String\l+ accept(IVisitor) : void\l+ accept(IPatternVisitor) : void\l+ getReturnType() : String\l+ getArgs() : String\l+ isVisited() : boolean\l+ setVisited(boolean) : void\l}"
];

NewConfigFrame [
shape="record",
label = "{NewConfigFrame| - frame: JFrame\l- inputClassesField: JTextField\l- outputDirField: JTextField\l- dotPathField: JTextField\l- phasesField: JTextField\l- adapterField: JTextField\l- decoratorField: JTextField\l- singletonField: JTextField\l- files: String\l|- addFiles(File[]) : void\l+ init() : void\l+ createNewConfig() : void\l+ actionPerformed(ActionEvent) : void\l}"
];

DesignParser [
shape="record",
label = "{DesignParser| + CLASSES: String[]\l- pathToDot: String\l- pathToSDEdit: String\l- outputDir: String\l- phases: String\l- completedPhases: int\l- currentPhase: String\l- patternsToDetect: String\l- jpb: JProgressBar\l- adapterDelegation: int\l- decoratorDelegation: int\l- getInstance: boolean\l|+ setSingletonGetInstance(boolean) : void\l+ getPathToDot() : String\l+ getMyProgress() : int\l+ generateUML(String; Model) : void\l+ removePattern(String) : void\l# doInBackground() : Void\l+ init(String; String) : void\l% clinit() : void\l+ setPhases(String) : String\l+ getPathToSD() : String\l+ setUpSD(String) : ISubMethod\l+ regenerateModel() : void\l+ detectAdapterPattern(IModel) : void\l+ setOutputDir(String) : void\l+ generateSD(String; Model; ISubMethod; int) : void\l+ addPattern(String) : void\l+ detectSingletonPattern(IModel) : void\l+ setDecoratorDelegation(int) : void\l- setDefaults() : void\l+ detectDecoratorPattern(IModel) : void\l- updateProgress() : void\l+ setClasses(String[]) : void\l+ main(String[]) : void\l+ init(String; String; JProgressBar) : void\l+ setAdapterDelegation(int) : void\l+ generateDot(IModel) : void\l+ getOutputDir() : String\l+ detectCompositePattern(IModel) : void\l+ done() : void\l+ getPhases() : String\l+ getCurrentPhase() : String\l+ visitClasses(String[]) : Model\l}"
];

PatternVisitor [
shape="record",
label = "{PatternVisitor| ~ keyToCommandMap: Map\l|- doVisit(VisitType; ITraverser) : void\l+ init() : void\l+ addVisit(VisitType; Class; IPatternVisitMethod) : void\l+ visit(ITraverser) : void\l+ postVisit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l}"
];

IPatternDetector [
shape="record",
label = "{\<\<interface\>\>\nIPatternDetector| + detectPatterns() : void\l}"
];

RelationType [
shape="record",
label = "{RelationType| + superclass: RelationType\l+ interfaces: RelationType\l+ uses: RelationType\l+ singleton: RelationType\l+ association: RelationType\l+ decorates: RelationType\l+ adapts: RelationType\l- ENUM$VALUES: RelationType[]\l|- init(String; int) : void\l+ values() : RelationType[]\l% clinit() : void\l+ valueOf(String) : RelationType\l}"
];

UMLLAMA [
shape="record",
label = "{UMLLAMA| + main(String[]) : void\l+ init() : void\l}"
];

DocType [
shape="record",
label = "{DocType| + uml: DocType\l+ sd: DocType\l+ both: DocType\l- ENUM$VALUES: DocType[]\l|+ values() : DocType[]\l% clinit() : void\l- init(String; int) : void\l+ valueOf(String) : DocType\l}"
];

IVisitor [
shape="record",
label = "{\<\<interface\>\>\nIVisitor| + postVisit(ITraverser) : void\l+ visit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l+ addVisit(VisitType; Class; IVisitMethod) : void\l+ preVisit(ITraverser) : void\l+ acceptSequence(IVisitor; ISubMethod; int) : void\l+ visitRelations(ITraverser) : void\l+ intermediateVisit(ITraverser) : void\l}"
];

ComponentDecorator [
shape="record",style="filled",fillcolor=green
label = "{ComponentDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getIsClass() : boolean\l+ accept(IVisitor) : void\l+ getName() : String\l+ getMethods() : IMethod\l+ accept(IPatternVisitor) : void\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ getSuperClass() : String\l+ getInterfaceList() : String\l+ getFields() : IField\l+ getSignature() : String\l+ init(IClass) : void\l}"
];

AdapterDecorator [
shape="record",style="filled",fillcolor=green
label = "{AdapterDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getMethods() : IMethod\l+ addMethod(IMethod) : void\l+ getSuperClass() : String\l+ getIsClass() : boolean\l+ accept(IPatternVisitor) : void\l+ getName() : String\l+ getFields() : IField\l+ addField(IField) : void\l+ init(IClass) : void\l+ getSignature() : String\l+ accept(IVisitor) : void\l+ getInterfaceList() : String\l}"
];

IField [
shape="record",
label = "{\<\<interface\>\>\nIField| + getAccess() : String\l+ getName() : String\l+ getIsCollection() : boolean\l+ getType() : String\l}"
];

ISubMethod [
shape="record",
label = "{\<\<interface\>\>\nISubMethod| + getMethodName() : String\l+ getClazzName() : String\l+ getQualifiedClassName() : String\l+ getReturnType() : String\l+ isVisited() : boolean\l+ getArgs() : String\l+ setVisited(boolean) : void\l}"
];

IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation| + getName() : String\l+ getRelatedClass() : String\l+ getType() : RelationType\l+ setName(String) : void\l+ setType(RelationType) : void\l+ setRelatedClass(String) : void\l}"
];

VisitType [
shape="record",
label = "{VisitType| + PreVisit: VisitType\l+ Visit: VisitType\l+ PostVisit: VisitType\l+ IntermediateVisit: VisitType\l+ RelationVisit: VisitType\l+ SingletonPattern: VisitType\l- ENUM$VALUES: VisitType[]\l|- init(String; int) : void\l+ values() : VisitType[]\l% clinit() : void\l+ valueOf(String) : VisitType\l}"
];

ConfigFrame [
shape="record",
label = "{ConfigFrame| - instance: ConfigFrame\l- frame: JFrame\l- dotPath: String\l- inputClasses: String\l- outputDir: String\l- phases: String\l- classes: String[]\l- parserPhases: String\l- adapterDelegation: String\l- decoratorDelegation: String\l- singletonGetInstance: String\l|+ createConfigFrame() : void\l+ copyToOurConfig(File) : void\l+ actionPerformed(ActionEvent) : void\l+ getInstance() : ConfigFrame\l- writeProperties() : void\l- readProperties(File) : void\l+ init() : void\l}"
];

ModelGVOutputStream [
shape="record",
label = "{ModelGVOutputStream| ~ out: OutputStream\l~ s: StringBuilder\l~ visitor: Visitor\l- $SWITCH_TABLE$problem$models$api$RelationType: int[]\l|- lambda$0(ITraverser) : void\l- lambda$1(ITraverser) : void\l- write(String) : void\l- lambda$8(ITraverser) : void\l- lambda$6(ITraverser) : void\l- lambda$7(ITraverser) : void\l- lambda$4(ITraverser) : void\l- lambda$5(ITraverser) : void\l- lambda$2(ITraverser) : void\l- lambda$3(ITraverser) : void\l- setPreVisitModel() : void\l- setRelationVisit() : void\l- setPreVisitClass() : void\l- setVisitMethod() : void\l- setPostVisitClass() : void\l- setVisitClass() : void\l- setPostVisitModel() : void\l- visitAssociations(IRelation) : void\l- setIntermediateVisit() : void\l- visitSingletons(IRelation) : void\l- setVisitField() : void\l- visitSuperClasses(IRelation) : void\l- visitAdapts(IRelation) : void\l% $SWITCH_TABLE$problem$models$api$RelationType() : int[]\l+ write(IModel) : void\l+ init(OutputStream) : void\l- visitInterfaces(IRelation) : void\l- visitDecorates(IRelation) : void\l- visitUses(IRelation) : void\l}"
];

IPatternVisitor [
shape="record",
label = "{\<\<interface\>\>\nIPatternVisitor| + addVisit(VisitType; Class; IPatternVisitMethod) : void\l+ postVisit(ITraverser) : void\l+ visit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l}"
];

IPatternVisitMethod [
shape="record",
label = "{\<\<interface\>\>\nIPatternVisitMethod| + execute(ITraverser) : void\l}"
];

Visitor [
shape="record",
label = "{Visitor| ~ keyToCommandMap: Map\l|+ visitRelations(ITraverser) : void\l+ init() : void\l- doVisit(VisitType; ITraverser) : void\l+ visit(ITraverser) : void\l+ postVisit(ITraverser) : void\l+ acceptSequence(IVisitor; ISubMethod; int) : void\l+ preVisit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l+ addVisit(VisitType; Class; IVisitMethod) : void\l+ intermediateVisit(ITraverser) : void\l}"
];

ClassDeclarationVisitor [
shape="record",
label = "{ClassDeclarationVisitor| - model: Model\l- clazz: IClass\l|+ visit(int; int; String; String; String; String[]) : void\l+ getClazz() : IClass\l+ splitOnSlash(String) : String\l+ init(int; Model) : void\l}"
];

ImageProxy [
shape="record",
label = "{ImageProxy| ~ imageIcon: ImageIcon\l~ filePath: String\l~ retrievalThread: Thread\l~ retrieving: boolean\l|+ isPicNull() : boolean\l+ paintIcon(Component; Graphics; int; int) : void\l+ init(String) : void\l+ flushImageProxy() : void\l+ getIconHeight() : int\l+ getIconWidth() : int\l}"
];

ResultsGui [
shape="record",
label = "{ResultsGui| ~ frame: JFrame\l~ panel: JPanel\l~ checkBoxPanel: JPanel\l~ pane: JScrollPane\l~ splitPane: JSplitPane\l~ outputDir: String\l~ parserPhases: String\l~ classesInPatterns: String\l~ imageLabel: JLabel\l~ dp: DesignParser\l~ model: Model\l~ patternToClasses: Map\l~ patternBoxes: JCheckBox\l|+ regenerate() : void\l- export() : void\l- addPatternsToMap() : void\l- addMenu() : JMenuBar\l- restart() : void\l- showHelp() : void\l+ actionPerformed(ActionEvent) : void\l- showAbout() : void\l+ removePatternClasses(String) : void\l+ init(DesignParser) : void\l- createNodes(String) : void\l+ addPatternClasses(String) : void\l}"
];

Field [
shape="record",
label = "{Field| - type: String\l- access: String\l- name: String\l- isCollection: boolean\l|+ getName() : String\l+ init(String; String; String; boolean) : void\l+ getIsCollection() : boolean\l+ accept(IVisitor) : void\l+ setName(String) : void\l+ accept(IPatternVisitor) : void\l+ getAccess() : String\l+ getType() : String\l}"
];

ClassFieldVisitor [
shape="record",
label = "{ClassFieldVisitor| - model: Model\l- clazz: IClass\l- decorated: ClassVisitor\l|+ init(int; ClassVisitor; Model) : void\l+ visitField(int; String; String; String; Object) : FieldVisitor\l+ getClazz() : IClass\l~ addAccessLevel(int) : String\l}"
];

MyMethodVisitor [
shape="record",
label = "{MyMethodVisitor| - model: Model\l- clazz: IClass\l- subMethods: ISubMethod\l- name: String\l|+ getSubMethods() : ISubMethod\l+ visitFieldInsn(int; String; String; String) : void\l+ visitTypeInsn(int; String) : void\l+ visitVarInsn(int; int) : void\l+ init(int; MethodVisitor; Model; IClass) : void\l+ visitMethodInsn(int; String; String; String; boolean) : void\l~ getArguments(String) : String\l~ getReturnType(String) : String\l~ getType(String) : String\l}"
];

Relation [
shape="record",
label = "{Relation| - name: String\l- relatedClass: String\l- type: RelationType\l|+ init(String; String; RelationType) : void\l+ getRelatedClass() : String\l+ accept(IVisitor) : void\l+ accept(IPatternVisitor) : void\l+ hashCode() : int\l+ init() : void\l+ setRelatedClass(String) : void\l+ getName() : String\l+ setName(String) : void\l+ getType() : RelationType\l+ setType(RelationType) : void\l+ equals(Object) : boolean\l}"
];

IMethod [
shape="record",
label = "{\<\<interface\>\>\nIMethod| + getSignature() : String\l+ getArgs() : String\l+ getAccess() : String\l+ getReturnType() : String\l+ getClazz() : IClass\l+ getName() : String\l+ getSubMethods() : ISubMethod\l+ getAccessNumber() : int\l}"
];

IClazzGetter [
shape="record",
label = "{\<\<interface\>\>\nIClazzGetter| + getClazz() : IClass\l}"
];

IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel| + getClasses() : IClass\l+ getMethodStrings() : String\l+ getClassStrings() : String\l+ replaceClass(IClass; IClass) : void\l+ getRelations() : IRelation\l+ addRelation(IRelation) : void\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l}"
];

ClassDecorator [
shape="record",style="filled",fillcolor=green
label = "{ClassDecorator\n\<\<decorator\>\>|- color: String\l- patternName: String\l|+ setPatternName(String) : void\l+ getColor() : String\l+ init() : void\l+ getPatternName() : String\l+ setColor(String) : void\l}"
];

SingletonDecorator [
shape="record",style="filled",fillcolor=green
label = "{SingletonDecorator\n\<\<decorator\>\>|- thisClass: IClass\l- color: String\l- patternName: String\l|+ getSignature() : String\l+ accept(IVisitor) : void\l+ getInterfaceList() : String\l+ accept(IPatternVisitor) : void\l+ getIsClass() : boolean\l+ init(IClass) : void\l+ getName() : String\l+ addField(IField) : void\l+ getMethods() : IMethod\l+ getFields() : IField\l+ addMethod(IMethod) : void\l+ getSuperClass() : String\l}"
];

//writing relations between classes now
ClassDeclarationVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassDeclarationVisitor -> Model [arrowhead = "vee"];
ClassDeclarationVisitor -> IClass [arrowhead = "vee"];
ClassDeclarationVisitor -> Class [arrowhead = "vee", style = "dashed"];
ClassDeclarationVisitor -> Relation [arrowhead = "vee", style = "dashed"];
ClassFieldVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassFieldVisitor -> Model [arrowhead = "vee"];
ClassFieldVisitor -> IClass [arrowhead = "vee"];
ClassFieldVisitor -> Relation [arrowhead = "vee", style = "dashed"];
ClassFieldVisitor -> Field [arrowhead = "vee", style = "dashed"];
ClassFieldVisitor -> IClazzGetter [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassMethodVisitor -> Model [arrowhead = "vee"];
ClassMethodVisitor -> IClass [arrowhead = "vee"];
ClassMethodVisitor -> MyMethodVisitor [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> Relation [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> Method [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> Class [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> IClazzGetter [arrowhead = "vee", style = "dashed"];
DesignParser -> SubMethod [arrowhead = "vee", style = "dashed"];
DesignParser -> Model [arrowhead = "vee", style = "dashed"];
DesignParser -> ClassDeclarationVisitor [arrowhead = "vee", style = "dashed"];
DesignParser -> ClassFieldVisitor [arrowhead = "vee", style = "dashed"];
DesignParser -> ClassMethodVisitor [arrowhead = "vee", style = "dashed"];
DesignParser -> IModel [arrowhead = "vee", style = "dashed"];
DesignParser -> SingletonDetector [arrowhead = "vee", style = "dashed"];
DesignParser -> DecoratorDetector [arrowhead = "vee", style = "dashed"];
DesignParser -> AdapterDetector [arrowhead = "vee", style = "dashed"];
DesignParser -> ModelGVOutputStream [arrowhead = "vee", style = "dashed"];
DesignParser -> ISubMethod [arrowhead = "vee", style = "dashed"];
DesignParser -> ModelSDOutputStream [arrowhead = "vee", style = "dashed"];
MyMethodVisitor -> Model [arrowhead = "vee"];
MyMethodVisitor -> IClass [arrowhead = "vee"];
MyMethodVisitor -> ISubMethod [arrowhead = "vee"];
MyMethodVisitor -> SubMethod [arrowhead = "vee", style = "dashed"];
MyMethodVisitor -> Relation [arrowhead = "vee", style = "dashed"];
AdapteeDecorator -> ClassDecorator [arrowhead = "empty"];
AdapteeDecorator -> IClass [arrowhead = "vee"];
AdapteeDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
AdapteeDecorator -> IField [arrowhead = "vee", style = "dashed"];
AdapteeDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
AdapteeDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
AdapterDecorator -> ClassDecorator [arrowhead = "empty"];
AdapterDecorator -> IClass [arrowhead = "vee"];
AdapterDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
AdapterDecorator -> IField [arrowhead = "vee", style = "dashed"];
AdapterDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
AdapterDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
ClassDecorator -> IClass [arrowhead = "empty", style = "dashed"];
ComponentDecorator -> ClassDecorator [arrowhead = "empty"];
ComponentDecorator -> IClass [arrowhead = "vee"];
ComponentDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
ComponentDecorator -> IField [arrowhead = "vee", style = "dashed"];
ComponentDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
ComponentDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
DecoratorDecorator -> ClassDecorator [arrowhead = "empty"];
DecoratorDecorator -> IClass [arrowhead = "vee"];
DecoratorDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
DecoratorDecorator -> IField [arrowhead = "vee", style = "dashed"];
DecoratorDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
DecoratorDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
SingletonDecorator -> ClassDecorator [arrowhead = "empty"];
SingletonDecorator -> IClass [arrowhead = "vee"];
SingletonDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
SingletonDecorator -> IField [arrowhead = "vee", style = "dashed"];
SingletonDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
SingletonDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
TargetDecorator -> ClassDecorator [arrowhead = "empty"];
TargetDecorator -> IClass [arrowhead = "vee"];
TargetDecorator -> IVisitor [arrowhead = "vee", style = "dashed"];
TargetDecorator -> IField [arrowhead = "vee", style = "dashed"];
TargetDecorator -> IMethod [arrowhead = "vee", style = "dashed"];
TargetDecorator -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
AdapterDetector -> IPatternDetector [arrowhead = "empty", style = "dashed"];
AdapterDetector -> IModel [arrowhead = "vee"];
AdapterDetector -> IClass [arrowhead = "vee"];
AdapterDetector -> IMethod [arrowhead = "vee", style = "dashed"];
AdapterDetector -> IField [arrowhead = "vee", style = "dashed"];
AdapterDetector -> IRelation [arrowhead = "vee", style = "dashed"];
AdapterDetector -> RelationType [arrowhead = "vee", style = "dashed"];
AdapterDetector -> ISubMethod [arrowhead = "vee", style = "dashed"];
AdapterDetector -> Relation [arrowhead = "vee", style = "dashed"];
AdapterDetector -> AdapterDecorator [arrowhead = "vee", style = "dashed"];
AdapterDetector -> AdapteeDecorator [arrowhead = "vee", style = "dashed"];
AdapterDetector -> TargetDecorator [arrowhead = "vee", style = "dashed"];
DecoratorDetector -> IPatternDetector [arrowhead = "empty", style = "dashed"];
DecoratorDetector -> IModel [arrowhead = "vee"];
DecoratorDetector -> IClass [arrowhead = "vee"];
DecoratorDetector -> IMethod [arrowhead = "vee", style = "dashed"];
DecoratorDetector -> IField [arrowhead = "vee", style = "dashed"];
DecoratorDetector -> DecoratorDecorator [arrowhead = "vee", style = "dashed"];
DecoratorDetector -> ComponentDecorator [arrowhead = "vee", style = "dashed"];
DecoratorDetector -> Relation [arrowhead = "vee", style = "dashed"];
SingletonDetector -> IPatternDetector [arrowhead = "empty", style = "dashed"];
SingletonDetector -> IModel [arrowhead = "vee"];
SingletonDetector -> IClass [arrowhead = "vee"];
SingletonDetector -> SingletonDecorator [arrowhead = "vee", style = "dashed"];
SingletonDetector -> Relation [arrowhead = "vee", style = "dashed"];
SingletonDetector -> IMethod [arrowhead = "vee", style = "dashed"];
IPatternVisitMethod -> ITraverser [arrowhead = "vee", style = "dashed"];
IPatternVisitor -> ITraverser [arrowhead = "vee", style = "dashed"];
IPatternVisitor -> VisitType [arrowhead = "vee", style = "dashed"];
IPatternVisitor -> Class [arrowhead = "vee", style = "dashed"];
IPatternVisitor -> IPatternVisitMethod [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> PatternVisitor [arrowhead = "vee"];
ModelPatternVisitor -> IClass [arrowhead = "vee"];
ModelPatternVisitor -> IModel [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> IMethod [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> ITraverser [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> IField [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> SingletonDecorator [arrowhead = "vee", style = "dashed"];
ModelPatternVisitor -> Relation [arrowhead = "vee", style = "dashed"];
PatternVisitor -> IPatternVisitor [arrowhead = "empty", style = "dashed"];
PatternVisitor -> ITraverser [arrowhead = "vee", style = "dashed"];
PatternVisitor -> VisitType [arrowhead = "vee", style = "dashed"];
PatternVisitor -> LookupKey [arrowhead = "vee", style = "dashed"];
PatternVisitor -> Class [arrowhead = "vee", style = "dashed"];
PatternVisitor -> IPatternVisitMethod [arrowhead = "vee", style = "dashed"];
ITraverser -> IVisitor [arrowhead = "vee", style = "dashed"];
ITraverser -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
IVisitor -> ITraverser [arrowhead = "vee", style = "dashed"];
IVisitor -> VisitType [arrowhead = "vee", style = "dashed"];
IVisitor -> Class [arrowhead = "vee", style = "dashed"];
IVisitor -> IVisitMethod [arrowhead = "vee", style = "dashed"];
IVisitor -> ISubMethod [arrowhead = "vee", style = "dashed"];
Visitor -> IVisitor [arrowhead = "empty", style = "dashed"];
Visitor -> ITraverser [arrowhead = "vee", style = "dashed"];
Visitor -> VisitType [arrowhead = "vee", style = "dashed"];
Visitor -> LookupKey [arrowhead = "vee", style = "dashed"];
Visitor -> Class [arrowhead = "vee", style = "dashed"];
Visitor -> IVisitMethod [arrowhead = "vee", style = "dashed"];
Visitor -> IVisitor [arrowhead = "vee", style = "dashed"];
Visitor -> ISubMethod [arrowhead = "vee", style = "dashed"];
LookupKey -> VisitType [arrowhead = "vee"];
LookupKey -> Class [arrowhead = "vee"];
IVisitMethod -> ITraverser [arrowhead = "vee", style = "dashed"];
IClass -> ITraverser [arrowhead = "empty"];
IClass -> IMethod [arrowhead = "vee", style = "dashed"];
IClass -> IField [arrowhead = "vee", style = "dashed"];
IField -> ITraverser [arrowhead = "empty"];
IMethod -> ITraverser [arrowhead = "empty"];
IModel -> ITraverser [arrowhead = "empty"];
IModel -> IClass [arrowhead = "vee", style = "dashed"];
IModel -> IRelation [arrowhead = "vee", style = "dashed"];
IRelation -> ITraverser [arrowhead = "empty"];
IRelation -> RelationType [arrowhead = "vee", style = "dashed"];
ISubMethod -> ITraverser [arrowhead = "empty"];
Class -> IClass [arrowhead = "empty", style = "dashed"];
Class -> IMethod [arrowhead = "vee"];
Class -> IField [arrowhead = "vee"];
Class -> IVisitor [arrowhead = "vee", style = "dashed"];
Class -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
Field -> IField [arrowhead = "empty", style = "dashed"];
Field -> IVisitor [arrowhead = "vee", style = "dashed"];
Field -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
Method -> IMethod [arrowhead = "empty", style = "dashed"];
Method -> IClass [arrowhead = "vee"];
Method -> ISubMethod [arrowhead = "vee"];
Method -> IVisitor [arrowhead = "vee", style = "dashed"];
Method -> Class [arrowhead = "vee", style = "dashed"];
Method -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
Model -> IModel [arrowhead = "empty", style = "dashed"];
Model -> IClass [arrowhead = "vee"];
Model -> IRelation [arrowhead = "vee"];
Model -> RelationType [arrowhead = "vee", style = "dashed"];
Model -> IVisitor [arrowhead = "vee", style = "dashed"];
Model -> ISubMethod [arrowhead = "vee", style = "dashed"];
Model -> IMethod [arrowhead = "vee", style = "dashed"];
Model -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> Visitor [arrowhead = "vee"];
ModelGVOutputStream -> IModel [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IRelation [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> ITraverser [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IClass [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> ClassDecorator [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> SingletonDecorator [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IMethod [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IField [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> Model [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> RelationType [arrowhead = "vee", style = "dashed"];
ModelSDOutputStream -> Visitor [arrowhead = "vee"];
ModelSDOutputStream -> IModel [arrowhead = "vee", style = "dashed"];
ModelSDOutputStream -> ITraverser [arrowhead = "vee", style = "dashed"];
Relation -> IRelation [arrowhead = "empty", style = "dashed"];
Relation -> RelationType [arrowhead = "vee"];
Relation -> IVisitor [arrowhead = "vee", style = "dashed"];
Relation -> Class [arrowhead = "vee", style = "dashed"];
Relation -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
SubMethod -> ISubMethod [arrowhead = "empty", style = "dashed"];
SubMethod -> IVisitor [arrowhead = "vee", style = "dashed"];
SubMethod -> IPatternVisitor [arrowhead = "vee", style = "dashed"];
ConfigFrame -> NewConfigFrame [arrowhead = "vee", style = "dashed"];
ConfigFrame -> OurConfig [arrowhead = "vee", style = "dashed"];
MainGui -> DesignParser [arrowhead = "vee"];
MainGui -> ConfigFrame [arrowhead = "vee", style = "dashed"];
NewConfigFrame -> OurConfig [arrowhead = "vee", style = "dashed"];
ResultsGui -> DesignParser [arrowhead = "vee"];
ResultsGui -> Model [arrowhead = "vee"];
ResultsGui -> ImageProxy [arrowhead = "vee", style = "dashed"];
ResultsGui -> IClass [arrowhead = "vee", style = "dashed"];
ResultsGui -> Class [arrowhead = "vee", style = "dashed"];
ResultsGui -> AdapterDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> AdapteeDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> TargetDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> DecoratorDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> ComponentDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> SingletonDecorator [arrowhead = "vee", style = "dashed"];
ResultsGui -> MainGui [arrowhead = "vee", style = "dashed"];
UMLLAMA -> MainGui [arrowhead = "vee", style = "dashed"];
Model -> Model [arrowhead = "vee"];
ClassDecorator -> IClass [arrowhead = "vee", label = "\<\<decorates\>\>"];
}