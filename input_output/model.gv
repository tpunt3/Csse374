digraph model{
rankdir = BT;
ClassDeclarationVisitor [
shape="record",
label = "{ClassDeclarationVisitor| -model: Model\l-clazz: IClass\l|+ init(int; Model) : void\l+ visit(int; int; String; String; String; String[]) : void\l+ getClazz() : problem.models.api.IClass\l}"
];

ClassFieldVisitor [
shape="record",
label = "{ClassFieldVisitor| -model: Model\l-clazz: IClass\l-decorated: ClassVisitor\l|+ init(int; ClassVisitor; Model) : void\l+ visitField(int; String; String; String; Object) : org.objectweb.asm.FieldVisitor\l~ addAccessLevel(int) : java.lang.String\l+ getClazz() : problem.models.api.IClass\l}"
];

ClassMethodVisitor [
shape="record",
label = "{ClassMethodVisitor| -model: Model\l-decorated: ClassVisitor\l-clazz: IClass\l|+ init(int) : void\l+ init(int; ClassVisitor; Model) : void\l+ visitMethod(int; String; String; String; String[]) : org.objectweb.asm.MethodVisitor\l~ addAccessLevel(int) : java.lang.String\l~ addReturnType(String) : java.lang.String\l~ addArguments(String) : java.lang.String\l+ getClazz() : problem.models.api.IClass\l}"
];

DesignParser [
shape="record",
label = "{DesignParser| +CLASSES: String[]\l|~ clinit() : void\l+ init() : void\l+ main(String[]) : void\l}"
];

FirstASM [
shape="record",
label = "{FirstASM| +myField: String\l|~ clinit() : void\l+ init() : void\l+ main(String[]) : void\l}"
];

IClazzGetter [
shape="record",
label = "{IClazzGetter| + getClazz() : problem.models.api.IClass\l}"
];

IModelTraverser [
shape="record",
label = "{IModelTraverser| + accept(IModelVisitor) : void\l}"
];

IModelVisitor [
shape="record",
label = "{IModelVisitor| + preVisit(IModel) : void\l+ preVisit(IClass) : void\l+ preVisit(IMethod) : void\l+ preVisit(IField) : void\l+ preVisit(IRelation) : void\l+ visit(IModel) : void\l+ visit(IClass) : void\l+ visit(IMethod) : void\l+ visit(IField) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IModel) : void\l+ postVisit(IClass) : void\l+ postVisit(IMethod) : void\l+ postVisit(IField) : void\l+ postVisit(IRelation) : void\l+ visitRelations(IModel) : void\l+ intermediateVisit(IClass) : void\l}"
];

ModelVisitorAdapter [
shape="record",
label = "{ModelVisitorAdapter| + init() : void\l+ preVisit(IModel) : void\l+ visit(IModel) : void\l+ postVisit(IModel) : void\l+ preVisit(IClass) : void\l+ visit(IClass) : void\l+ postVisit(IClass) : void\l+ visit(IMethod) : void\l+ visit(IField) : void\l+ preVisit(IMethod) : void\l+ preVisit(IField) : void\l+ postVisit(IMethod) : void\l+ postVisit(IField) : void\l+ intermediateVisit(IClass) : void\l+ preVisit(IRelation) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IRelation) : void\l+ visitRelations(IModel) : void\l}"
];

IClass [
shape="record",
label = "{IClass| + getName() : java.lang.String\l+ getMethods() : java.util.Collection\l+ getFields() : java.util.Collection\l+ getRelations() : java.util.Collection\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ addRelation(IRelation) : void\l}"
];

IField [
shape="record",
label = "{IField| + getType() : java.lang.String\l+ getAccess() : java.lang.String\l+ getName() : java.lang.String\l}"
];

IMethod [
shape="record",
label = "{IMethod| + getAccess() : java.lang.String\l+ getName() : java.lang.String\l+ getArgs() : java.lang.String\l+ getReturnType() : java.lang.String\l}"
];

IModel [
shape="record",
label = "{IModel| + getClasses() : java.util.Collection\l+ addClazz(IClass) : void\l+ getClazz(String) : problem.models.api.IClass\l+ getRelations() : java.util.Collection\l}"
];

IRelation [
shape="record",
label = "{IRelation| + getSuperClass() : java.lang.String\l+ getInterfaces() : java.util.Map\l+ getSuperClasses() : java.util.Map\l+ addSuperClass(String; String) : void\l+ addInterfaces(String; String[]) : void\l}"
];

Class [
shape="record",
label = "{Class| -name: String\l-methods: Collection\l-fields: Collection\l-relations: Collection\l|+ init(String) : void\l+ init() : void\l+ getName() : java.lang.String\l+ getMethods() : java.util.Collection\l+ getFields() : java.util.Collection\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ getRelations() : java.util.Collection\l+ addRelation(IRelation) : void\l+ accept(IModelVisitor) : void\l}"
];

Field [
shape="record",
label = "{Field| -type: String\l-access: String\l-name: String\l|+ init(String; String; String) : void\l+ getName() : java.lang.String\l+ setName(String) : void\l+ getType() : java.lang.String\l+ getAccess() : java.lang.String\l+ accept(IModelVisitor) : void\l}"
];

Method [
shape="record",
label = "{Method| -signature: String\l-access: String\l-name: String\l-args: String\l-returnType: String\l|+ getReturnType() : java.lang.String\l+ getArgs() : java.lang.String\l+ getName() : java.lang.String\l+ setName(String) : void\l+ init(String; String; String; String) : void\l+ getAccess() : java.lang.String\l+ accept(IModelVisitor) : void\l}"
];

Model [
shape="record",
label = "{Model| -classes: Collection\l-relations: Collection\l|+ init() : void\l+ init(Collection) : void\l+ getRelations() : java.util.Collection\l+ setRelations(Collection) : void\l+ addRelation(IRelation) : void\l+ getClasses() : java.util.Collection\l+ accept(IModelVisitor) : void\l+ toString() : java.lang.String\l+ addClazz(IClass) : void\l+ getClazz(String) : problem.models.api.IClass\l}"
];

ModelGVOutputStream [
shape="record",
label = "{ModelGVOutputStream| ~out: OutputStream\l~s: StringBuilder\l|+ init() : void\l+ init(OutputStream) : void\l- write(String) : void\l+ preVisit(IModel) : void\l+ visit(IModel) : void\l+ postVisit(IModel) : void\l+ preVisit(IClass) : void\l+ visit(IClass) : void\l+ postVisit(IClass) : void\l+ preVisit(IMethod) : void\l+ visit(IMethod) : void\l+ postVisit(IMethod) : void\l+ preVisit(IField) : void\l+ visit(IField) : void\l+ postVisit(IField) : void\l+ preVisit(IRelation) : void\l+ visitRelations(IModel) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IRelation) : void\l+ intermediateVisit(IClass) : void\l}"
];

Relation [
shape="record",
label = "{Relation| -subclassToSuperclass: Map\l-subclassToInterface: Map\l-superClass: String\l-interfaces: String[]\l|+ init() : void\l+ init(String) : void\l+ init(String[]) : void\l+ init(String; String[]) : void\l+ getSuperClass() : java.lang.String\l+ accept(IModelVisitor) : void\l+ getSuperClasses() : java.util.Map\l+ addSuperClass(String; String) : void\l+ addInterfaces(String; String[]) : void\l+ getInterfaces() : java.util.Map\l+ setSubclassToInterface(Map) : void\l}"
];

//writing relations between classes now
ClassDeclarationVisitor -> ClassVisitor [arrowhead = "empty"];
ClassFieldVisitor -> ClassVisitor [arrowhead = "empty"];
ClassMethodVisitor -> ClassVisitor [arrowhead = "empty"];
DesignParser -> Object [arrowhead = "empty"];
FirstASM -> Object [arrowhead = "empty"];
IClazzGetter -> Object [arrowhead = "empty"];
IModelTraverser -> Object [arrowhead = "empty"];
IModelVisitor -> Object [arrowhead = "empty"];
ModelVisitorAdapter -> Object [arrowhead = "empty"];
IClass -> Object [arrowhead = "empty"];
IField -> Object [arrowhead = "empty"];
IMethod -> Object [arrowhead = "empty"];
IModel -> Object [arrowhead = "empty"];
IRelation -> Object [arrowhead = "empty"];
Class -> Object [arrowhead = "empty"];
Field -> Object [arrowhead = "empty"];
Method -> Object [arrowhead = "empty"];
Model -> Object [arrowhead = "empty"];
ModelGVOutputStream -> ModelVisitorAdapter [arrowhead = "empty"];
Relation -> Object [arrowhead = "empty"];
ClassDeclarationVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassFieldVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassMethodVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ModelVisitorAdapter -> IModelVisitor [arrowhead = "empty", style = "dashed"];
IClass -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IField -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IMethod -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IModel -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IRelation -> IModelTraverser [arrowhead = "empty", style = "dashed"];
Class -> IClass [arrowhead = "empty", style = "dashed"];
Field -> IField [arrowhead = "empty", style = "dashed"];
Method -> IMethod [arrowhead = "empty", style = "dashed"];
Model -> IModel [arrowhead = "empty", style = "dashed"];
Relation -> IRelation [arrowhead = "empty", style = "dashed"];
}