digraph model{
rankdir = BT;
ClassDeclarationVisitor [
shape="record",
label = "{ClassDeclarationVisitor| - model: Model\l- clazz: IClass\l|+ init(int; Model) : void\l+ visit(int; int; String; String; String; String[]) : void\l+ getClazz() : IClass\l}"
];

ClassFieldVisitor [
shape="record",
label = "{ClassFieldVisitor| - model: Model\l- clazz: IClass\l- decorated: ClassVisitor\l|+ init(int; ClassVisitor; Model) : void\l+ visitField(int; String; String; String; Object) : FieldVisitor\l~ addAccessLevel(int) : String\l+ getClazz() : IClass\l}"
];

ClassMethodVisitor [
shape="record",
label = "{ClassMethodVisitor| - model: Model\l- decorated: ClassVisitor\l- clazz: IClass\l|+ init(int) : void\l+ init(int; ClassVisitor; Model) : void\l+ visitMethod(int; String; String; String; String[]) : MethodVisitor\l~ addAccessLevel(int) : String\l~ addReturnType(String) : String\l~ addArguments(String) : String\l+ getClazz() : IClass\l}"
];

DesignParser [
shape="record",
label = "{DesignParser| + CLASSES: String[]\l|~ clinit() : void\l+ init() : void\l+ main(String[]) : void\l}"
];

IClazzGetter [
shape="record",
label = "{\<\<interface\>\>\nIClazzGetter| + getClazz() : IClass\l}"
];

IModelTraverser [
shape="record",
label = "{\<\<interface\>\>\nIModelTraverser| + accept(IModelVisitor) : void\l}"
];

IModelVisitor [
shape="record",
label = "{\<\<interface\>\>\nIModelVisitor| + preVisit(IModel) : void\l+ preVisit(IClass) : void\l+ preVisit(IMethod) : void\l+ preVisit(IField) : void\l+ preVisit(IRelation) : void\l+ visit(IModel) : void\l+ visit(IClass) : void\l+ visit(IMethod) : void\l+ visit(IField) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IModel) : void\l+ postVisit(IClass) : void\l+ postVisit(IMethod) : void\l+ postVisit(IField) : void\l+ postVisit(IRelation) : void\l+ visitRelations(IModel) : void\l+ intermediateVisit(IClass) : void\l}"
];

ModelVisitorAdapter [
shape="record",
label = "{ModelVisitorAdapter| + init() : void\l+ preVisit(IModel) : void\l+ visit(IModel) : void\l+ postVisit(IModel) : void\l+ preVisit(IClass) : void\l+ visit(IClass) : void\l+ postVisit(IClass) : void\l+ visit(IMethod) : void\l+ visit(IField) : void\l+ preVisit(IMethod) : void\l+ preVisit(IField) : void\l+ postVisit(IMethod) : void\l+ postVisit(IField) : void\l+ intermediateVisit(IClass) : void\l+ preVisit(IRelation) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IRelation) : void\l+ visitRelations(IModel) : void\l}"
];

IClass [
shape="record",
label = "{\<\<interface\>\>\nIClass| + getName() : String\l+ getMethods() : IMethod\l+ getFields() : IField\l+ getRelations() : IRelation\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ addRelation(IRelation) : void\l+ getIsClass() : boolean\l}"
];

IField [
shape="record",
label = "{\<\<interface\>\>\nIField| + getType() : String\l+ getAccess() : String\l+ getName() : String\l}"
];

IMethod [
shape="record",
label = "{\<\<interface\>\>\nIMethod| + getAccess() : String\l+ getName() : String\l+ getArgs() : String\l+ getReturnType() : String\l}"
];

IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel| + getClasses() : IClass\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l+ getRelations() : IRelation\l}"
];

IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation| + setName(String) : void\l+ getName() : String\l+ setRelatedClass(String) : void\l+ getRelatedClass() : String\l+ setType(RelationType) : void\l+ getType() : RelationType\l}"
];

Class [
shape="record",
label = "{Class| - name: String\l- methods: IMethod\l- fields: IField\l- relations: IRelation\l- isClass: boolean\l|+ init(String; boolean) : void\l+ init() : void\l+ getName() : String\l+ getMethods() : IMethod\l+ getFields() : IField\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ getRelations() : IRelation\l+ addRelation(IRelation) : void\l+ accept(IModelVisitor) : void\l+ getIsClass() : boolean\l}"
];

Field [
shape="record",
label = "{Field| - type: String\l- access: String\l- name: String\l|+ init(String; String; String) : void\l+ getName() : String\l+ setName(String) : void\l+ getType() : String\l+ getAccess() : String\l+ accept(IModelVisitor) : void\l}"
];

Method [
shape="record",
label = "{Method| - access: String\l- name: String\l- args: String\l- returnType: String\l|+ getReturnType() : String\l+ getArgs() : String\l+ getName() : String\l+ setName(String) : void\l+ init(String; String; String; String) : void\l+ getAccess() : String\l+ accept(IModelVisitor) : void\l}"
];

Model [
shape="record",
label = "{Model| - classes: IClass\l- relations: IRelation\l|+ init() : void\l+ init(Collection) : IClass\l+ getRelations() : IRelation\l+ setRelations(ArrayList) : IRelation\l+ addRelation(IRelation) : void\l+ getClasses() : IClass\l+ accept(IModelVisitor) : void\l+ toString() : String\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l}"
];

ModelGVOutputStream [
shape="record",
label = "{ModelGVOutputStream| ~ out: OutputStream\l~ s: StringBuilder\l- $SWITCH_TABLE$problem$models$api$RelationType: int[]\l|+ init() : void\l+ init(OutputStream) : void\l- write(String) : void\l+ preVisit(IModel) : void\l+ visit(IModel) : void\l+ postVisit(IModel) : void\l+ preVisit(IClass) : void\l+ visit(IClass) : void\l+ postVisit(IClass) : void\l+ preVisit(IMethod) : void\l+ visit(IMethod) : void\l+ postVisit(IMethod) : void\l+ preVisit(IField) : void\l+ visit(IField) : void\l+ postVisit(IField) : void\l+ preVisit(IRelation) : void\l+ visitRelations(IModel) : void\l- visitAssociations(IRelation) : void\l- visitUses(IRelation) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IRelation) : void\l+ intermediateVisit(IClass) : void\l~ $SWITCH_TABLE$problem$models$api$RelationType() : int[]\l}"
];

Relation [
shape="record",
label = "{Relation| - name: String\l- relatedClass: String\l- type: RelationType\l|+ init() : void\l+ init(String; String; RelationType) : void\l+ getName() : String\l+ setName(String) : void\l+ getRelatedClass() : String\l+ setRelatedClass(String) : void\l+ getType() : RelationType\l+ setType(RelationType) : void\l+ accept(IModelVisitor) : void\l+ hashCode() : int\l+ equals(Object) : boolean\l}"
];

//writing relations between classes now
ClassDeclarationVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassDeclarationVisitor -> Model [arrowhead = "vee"];
ClassDeclarationVisitor -> Class [arrowhead = "vee"];
ClassDeclarationVisitor -> IClass [arrowhead = "vee"];
ClassDeclarationVisitor -> Relation [arrowhead = "vee"];
ClassDeclarationVisitor -> IRelation [arrowhead = "vee", style = "dashed"];
ClassFieldVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassFieldVisitor -> Model [arrowhead = "vee"];
ClassFieldVisitor -> IClass [arrowhead = "vee"];
ClassFieldVisitor -> Field [arrowhead = "vee"];
ClassFieldVisitor -> IField [arrowhead = "vee", style = "dashed"];
ClassFieldVisitor -> IClazzGetter [arrowhead = "vee"];
ClassMethodVisitor -> IClazzGetter [arrowhead = "empty", style = "dashed"];
ClassMethodVisitor -> IClass [arrowhead = "vee"];
ClassMethodVisitor -> Model [arrowhead = "vee"];
ClassMethodVisitor -> Method [arrowhead = "vee"];
ClassMethodVisitor -> IMethod [arrowhead = "vee", style = "dashed"];
ClassMethodVisitor -> IClazzGetter [arrowhead = "vee"];
DesignParser -> Model [arrowhead = "vee"];
DesignParser -> ClassDeclarationVisitor [arrowhead = "vee"];
DesignParser -> ClassFieldVisitor [arrowhead = "vee"];
DesignParser -> ClassMethodVisitor [arrowhead = "vee"];
DesignParser -> ModelGVOutputStream [arrowhead = "vee"];
DesignParser -> IModelVisitor [arrowhead = "vee", style = "dashed"];
ModelVisitorAdapter -> IModelVisitor [arrowhead = "empty", style = "dashed"];
IClass -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IField -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IMethod -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IModel -> IModelTraverser [arrowhead = "empty", style = "dashed"];
IRelation -> IModelTraverser [arrowhead = "empty", style = "dashed"];
Class -> IClass [arrowhead = "empty", style = "dashed"];
Class -> IClass [arrowhead = "vee", style = "dashed"];
Class -> IField [arrowhead = "vee"];
Class -> IModelVisitor [arrowhead = "vee", style = "dashed"];
Class -> IMethod [arrowhead = "vee"];
Field -> IField [arrowhead = "empty", style = "dashed"];
Field -> IField [arrowhead = "vee", style = "dashed"];
Method -> IMethod [arrowhead = "empty", style = "dashed"];
Method -> IMethod [arrowhead = "vee", style = "dashed"];
Model -> IModel [arrowhead = "empty", style = "dashed"];
Model -> IRelation [arrowhead = "vee"];
Model -> IModel [arrowhead = "vee", style = "dashed"];
Model -> IClass [arrowhead = "vee"];
Model -> IModelVisitor [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> ModelVisitorAdapter [arrowhead = "empty"];
ModelGVOutputStream -> IModel [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IMethod [arrowhead = "vee", style = "dashed"];
ModelGVOutputStream -> IRelation [arrowhead = "vee"];
Relation -> IRelation [arrowhead = "empty", style = "dashed"];
Relation -> Relation [arrowhead = "vee"];
}