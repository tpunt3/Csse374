digraph model{
rankdir = BT;
IVisitor [
shape="record",
label = "{\<\<interface\>\>\nIVisitor| + postVisit(ITraverser) : void\l+ visit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l+ addVisit(VisitType; Class; IVisitMethod) : void\l+ preVisit(ITraverser) : void\l+ visitRelations(ITraverser) : void\l+ intermediateVisit(ITraverser) : void\l}"
];

ClassMethodVisitor [
shape="record",
label = "{ClassMethodVisitor| - model: Model\l- decorated: ClassVisitor\l- clazz: IClass\l- signature: String\l- name: String\l- argList: String\l|+ init(int; ClassVisitor; Model) : void\l- addArgToList(String; boolean) : void\l~ addReturnType(String) : String\l+ init(int) : void\l+ visitMethod(int; String; String; String; String[]) : MethodVisitor\l~ addArguments(String) : void\l+ getClazz() : IClass\l~ addAccessLevel(int) : String\l}"
];

LookupKey [
shape="record",
label = "{LookupKey| ~ visitType: VisitType\l~ clazz: Class\l|+ init(VisitType; Class) : void\l+ equals(Object) : boolean\l+ hashCode() : int\l}"
];

Method [
shape="record",
label = "{Method| - access: String\l- accessNumber: int\l- name: String\l- args: String\l- returnType: String\l- signature: String\l- clazz: IClass\l- subMethods: ISubMethod\l|+ getAccessNumber() : int\l+ setName(String) : void\l+ getSignature() : String\l+ getArgs() : String\l+ equals(Object) : boolean\l+ getName() : String\l+ getClazz() : IClass\l+ setAccessNumber(int) : void\l+ init(String; String; String; String; IClass; ISubMethod; ) : ISubMethod\l+ getSubMethods() : ISubMethod\l+ hashCode() : int\l+ accept(IVisitor) : void\l+ setClazz(IClass) : void\l+ getReturnType() : String\l+ setSignature(String) : void\l+ getAccess() : String\l}"
];

IField [
shape="record",
label = "{\<\<interface\>\>\nIField| + getAccess() : String\l+ getName() : String\l+ getType() : String\l}"
];

VisitType [
shape="record",
label = "{VisitType| + PreVisit: VisitType\l+ Visit: VisitType\l+ PostVisit: VisitType\l+ IntermediateVisit: VisitType\l+ RelationVisit: VisitType\l- ENUM$VALUES: VisitType[]\l|- init(String; int) : void\l+ values() : VisitType[]\l% clinit() : void\l+ valueOf(String) : VisitType\l}"
];

RelationType [
shape="record",
label = "{RelationType| + superclass: RelationType\l+ interfaces: RelationType\l+ uses: RelationType\l+ association: RelationType\l- ENUM$VALUES: RelationType[]\l|- init(String; int) : void\l+ values() : RelationType[]\l% clinit() : void\l+ valueOf(String) : RelationType\l}"
];

ISubMethod [
shape="record",
label = "{\<\<interface\>\>\nISubMethod| + getMethodName() : String\l+ getClazzName() : String\l+ getQualifiedClassName() : String\l+ getReturnType() : String\l+ isVisited() : boolean\l+ getArgs() : String\l+ setVisited(boolean) : void\l}"
];

IVisitMethod [
shape="record",
label = "{\<\<interface\>\>\nIVisitMethod| + execute(ITraverser) : void\l}"
];

Class [
shape="record",
label = "{Class| - name: String\l- methods: IMethod\l- fields: IField\l- isClass: boolean\l- patterns: PatternType\l|+ equals(Object) : boolean\l+ accept(IVisitor) : void\l+ getIsClass() : boolean\l+ init() : void\l+ getName() : String\l+ addField(IField) : void\l+ hashCode() : int\l+ init(String; boolean) : void\l+ getMethods() : IMethod\l+ getFields() : IField\l+ addMethod(IMethod) : void\l+ isSingleton() : boolean\l}"
];

IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation| + getName() : String\l+ getRelatedClass() : String\l+ getType() : RelationType\l+ setName(String) : void\l+ setType(RelationType) : void\l+ setRelatedClass(String) : void\l}"
];

DocType [
shape="record",
label = "{DocType| + uml: DocType\l+ sd: DocType\l+ both: DocType\l- ENUM$VALUES: DocType[]\l|+ values() : DocType[]\l% clinit() : void\l- init(String; int) : void\l+ valueOf(String) : DocType\l}"
];

ModelGVOutputStream [
shape="record",
label = "{ModelGVOutputStream| ~ out: OutputStream\l~ s: StringBuilder\l~ visitor: Visitor\l- $SWITCH_TABLE$problem$models$api$RelationType: int[]\l|- lambda$0(ITraverser) : void\l- lambda$1(ITraverser) : void\l- write(String) : void\l- lambda$8(ITraverser) : void\l- lambda$6(ITraverser) : void\l- lambda$7(ITraverser) : void\l- lambda$4(ITraverser) : void\l- lambda$5(ITraverser) : void\l- lambda$2(ITraverser) : void\l- lambda$3(ITraverser) : void\l- setPreVisitModel() : void\l- setRelationVisit() : void\l- setPreVisitClass() : void\l- setVisitMethod() : void\l- setPostVisitClass() : void\l- setVisitClass() : void\l- setPostVisitModel() : void\l- visitAssociations(IRelation) : void\l- setIntermediateVisit() : void\l- setVisitField() : void\l- visitSuperClasses(IRelation) : void\l% $SWITCH_TABLE$problem$models$api$RelationType() : int[]\l+ write(IModel) : void\l+ init(OutputStream) : void\l- visitInterfaces(IRelation) : void\l- visitUses(IRelation) : void\l}"
];

ITraverser [
shape="record",
label = "{\<\<interface\>\>\nITraverser| + accept(IVisitor) : void\l}"
];

SubMethod [
shape="record",
label = "{SubMethod| - clazzName: String\l- name: String\l- args: String\l- qualifiedClassName: String\l- returnType: String\l- visited: boolean\l|+ getClazzName() : String\l+ getQualifiedClassName() : String\l+ init(String; String; String; String; String) : void\l+ getMethodName() : String\l+ accept(IVisitor) : void\l+ getReturnType() : String\l+ getArgs() : String\l+ isVisited() : boolean\l+ setVisited(boolean) : void\l}"
];

Visitor [
shape="record",
label = "{Visitor| ~ keyToCommandMap: IVisitMethod\l|+ visitRelations(ITraverser) : void\l+ init() : void\l- doVisit(VisitType; ITraverser) : void\l+ visit(ITraverser) : void\l+ postVisit(ITraverser) : void\l+ preVisit(ITraverser) : void\l+ removeVisit(VisitType; Class) : void\l+ addVisit(VisitType; Class; IVisitMethod) : void\l+ intermediateVisit(ITraverser) : void\l}"
];

ClassDeclarationVisitor [
shape="record",
label = "{ClassDeclarationVisitor| - model: Model\l- clazz: IClass\l|+ visit(int; int; String; String; String; String[]) : void\l+ getClazz() : IClass\l+ splitOnSlash(String) : String\l+ init(int; Model) : void\l}"
];

DesignParser [
shape="record",
label = "{DesignParser| + CLASSES: String[]\l|+ main(String[]) : void\l+ generateSD(Model; ISubMethod; int) : void\l+ generateUML(Model) : void\l% clinit() : void\l+ visitClasses(String[]; Model) : void\l+ init() : void\l+ generateDocuments(DocType; String; int; String[]) : void\l+ testVisitor() : void\l}"
];

Field [
shape="record",
label = "{Field| - type: String\l- access: String\l- name: String\l|+ getName() : String\l+ init(String; String; String) : void\l+ accept(IVisitor) : void\l+ setName(String) : void\l+ getAccess() : String\l+ getType() : String\l}"
];

ClassFieldVisitor [
shape="record",
label = "{ClassFieldVisitor| - model: Model\l- clazz: IClass\l- decorated: ClassVisitor\l|+ init(int; ClassVisitor; Model) : void\l+ visitField(int; String; String; String; Object) : FieldVisitor\l+ getClazz() : IClass\l~ addAccessLevel(int) : String\l}"
];

MyMethodVisitor [
shape="record",
label = "{MyMethodVisitor| - model: Model\l- clazz: IClass\l- subMethods: ISubMethod\l- name: String\l|+ getSubMethods() : ISubMethod\l+ visitFieldInsn(int; String; String; String) : void\l+ visitTypeInsn(int; String) : void\l+ visitVarInsn(int; int) : void\l+ init(int; MethodVisitor; Model; IClass) : void\l+ visitMethodInsn(int; String; String; String; boolean) : void\l~ getArguments(String) : String\l~ getReturnType(String) : String\l~ getType(String) : String\l}"
];

Relation [
shape="record",
label = "{Relation| - name: String\l- relatedClass: String\l- type: RelationType\l|+ init(String; String; RelationType) : void\l+ getRelatedClass() : String\l+ accept(IVisitor) : void\l+ hashCode() : int\l+ init() : void\l+ setRelatedClass(String) : void\l+ getName() : String\l+ setName(String) : void\l+ getType() : RelationType\l+ setType(RelationType) : void\l+ equals(Object) : boolean\l}"
];

IMethod [
shape="record",
label = "{\<\<interface\>\>\nIMethod| + getSignature() : String\l+ getArgs() : String\l+ getAccess() : String\l+ getReturnType() : String\l+ getClazz() : IClass\l+ getName() : String\l+ getSubMethods() : ISubMethod\l+ getAccessNumber() : int\l}"
];

Model [
shape="record",
