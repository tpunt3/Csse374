digraph model{
rankdir = BT;
Model [
shape="record",
label = "{Model| - classes: IClass\l- relations: IRelation\l|+ init() : void\l+ init(IClass) : IClass\l+ getRelations() : IRelation\l+ setRelations(IRelation) : IRelation\l+ addRelation(IRelation) : void\l+ getClasses() : IClass\l+ accept(IModelVisitor) : void\l+ toString() : String\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l}"
];

IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel| + getClasses() : IClass\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l+ getRelations() : IRelation\l}"
];

IClass [
shape="record",
label = "{\<\<interface\>\>\nIClass| + getName() : String\l+ getMethods() : IMethod\l+ getFields() : IField\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ getIsClass() : boolean\l}"
];

IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation| + setName(String) : void\l+ getName() : String\l+ setRelatedClass(String) : void\l+ getRelatedClass() : String\l+ setType(RelationType) : void\l+ getType() : RelationType\l}"
];

//writing relations between classes now
Model -> IModel [arrowhead = "empty", style = "dashed"];
Model -> IClass [arrowhead = "vee"];
Model -> IRelation [arrowhead = "vee"];
Model -> IModelVisitor [arrowhead = "vee", style = "dashed"];
IModel -> IModelTraverser [arrowhead = "empty"];
IModel -> IClass [arrowhead = "vee", style = "dashed"];
IClass -> IModelTraverser [arrowhead = "empty"];
IClass -> IMethod [arrowhead = "vee", style = "dashed"];
IClass -> IField [arrowhead = "vee", style = "dashed"];
IRelation -> IModelTraverser [arrowhead = "empty"];
IRelation -> RelationType [arrowhead = "vee", style = "dashed"];
}