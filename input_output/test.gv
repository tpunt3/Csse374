digraph model{
rankdir = BT;
IModelVisitor [
shape="record",
label = "{\<\<interface\>\>\nIModelVisitor| + preVisit(IModel) : void\l+ preVisit(IClass) : void\l+ preVisit(IMethod) : void\l+ preVisit(IField) : void\l+ preVisit(IRelation) : void\l+ visit(IModel) : void\l+ visit(IClass) : void\l+ visit(IMethod) : void\l+ visit(IField) : void\l+ visitSuperClasses(IRelation) : void\l+ visitInterfaces(IRelation) : void\l+ postVisit(IModel) : void\l+ postVisit(IClass) : void\l+ postVisit(IMethod) : void\l+ postVisit(IField) : void\l+ postVisit(IRelation) : void\l+ visitRelations(IModel) : void\l+ intermediateVisit(IClass) : void\l}"
];

IModel [
shape="record",
label = "{\<\<interface\>\>\nIModel| + getClasses() : IClass\l+ addClazz(IClass) : void\l+ getClazz(String) : IClass\l+ getRelations() : IRelation\l}"
];

IClass [
shape="record",
label = "{\<\<interface\>\>\nIClass| + getName() : String\l+ getMethods() : IMethod\l+ getFields() : IField\l+ addMethod(IMethod) : void\l+ addField(IField) : void\l+ getIsClass() : boolean\l}"
];

IRelation [
shape="record",
label = "{\<\<interface\>\>\nIRelation| + setName(String) : void\l+ getName() : String\l+ setRelatedClass(String) : void\l+ getRelatedClass() : String\l+ setType(RelationType) : void\l+ getType() : RelationType\l}"
];

IField [
shape="record",
label = "{\<\<interface\>\>\nIField| + getType() : String\l+ getAccess() : String\l+ getName() : String\l}"
];

IMethod [
shape="record",
label = "{\<\<interface\>\>\nIMethod| + getAccess() : String\l+ getName() : String\l+ getArgs() : String\l+ getReturnType() : String\l}"
];

//writing relations between classes now
IModelVisitor -> IModel [arrowhead = "vee", style = "dashed"];
IModelVisitor -> IClass [arrowhead = "vee", style = "dashed"];
IModelVisitor -> IMethod [arrowhead = "vee", style = "dashed"];
IModelVisitor -> IField [arrowhead = "vee", style = "dashed"];
IModelVisitor -> IRelation [arrowhead = "vee", style = "dashed"];
IModel -> IModelTraverser [arrowhead = "empty"];
IModel -> IClass [arrowhead = "vee", style = "dashed"];
IClass -> IModelTraverser [arrowhead = "empty"];
IClass -> IMethod [arrowhead = "vee", style = "dashed"];
IClass -> IField [arrowhead = "vee", style = "dashed"];
IRelation -> IModelTraverser [arrowhead = "empty"];
IRelation -> RelationType [arrowhead = "vee", style = "dashed"];
IField -> IModelTraverser [arrowhead = "empty"];
IMethod -> IModelTraverser [arrowhead = "empty"];
}